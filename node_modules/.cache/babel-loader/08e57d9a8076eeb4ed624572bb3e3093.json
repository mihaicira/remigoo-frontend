{"ast":null,"code":"export const popUpError = () => {\n  document.getElementById(\"account-error\").style.transform = \"scale(1.2)\";\n  setTimeout(() => {\n    document.getElementById(\"account-error\").style.transform = \"scale(1)\";\n  }, 500);\n};\nexport const validateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\nexport async function LoginRequest(obj) {\n  //    email,password\n  console.log(`http://localhost:3000/login?email_address=${obj.email}&password=${obj.password}`);\n  const response = await fetch(`http://localhost:3000/login?email_address=${obj.email}&password=${obj.password}`);\n  return await response.json();\n}\n_c = LoginRequest;\nexport const beautifyMinutes = min => {\n  let time = Math.floor(min / 60) + \"h\";\n  if (min % 60 !== 0) time += ' ' + min % 60 + 'm';\n  return time;\n};\nexport const isDateInPast = date => {\n  const splittedValue = date.split('-');\n  const selectedDate = new Date(splittedValue[0], splittedValue[1] - 1, splittedValue[2]);\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  return selectedDate < today;\n};\nexport const monthNumberToString = number => {\n  const months = {\n    '01': \"January\",\n    '02': \"February\",\n    '03': \"March\",\n    '04': \"April\",\n    '05': \"May\",\n    '06': \"June\",\n    '07': \"July\",\n    '08': \"August\",\n    '09': \"September\",\n    '10': \"October\",\n    '11': \"November\",\n    '12': \"December\"\n  };\n  return months[number];\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRequest\");","map":{"version":3,"sources":["D:/react/remigoo/src/utils/utils.js"],"names":["popUpError","document","getElementById","style","transform","setTimeout","validateEmail","email","re","test","String","toLowerCase","LoginRequest","obj","console","log","password","response","fetch","json","beautifyMinutes","min","time","Math","floor","isDateInPast","date","splittedValue","split","selectedDate","Date","now","today","getFullYear","getMonth","getDate","monthNumberToString","number","months"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,MAAK;AAC3BC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,KAAzC,CAA+CC,SAA/C,GAAyD,YAAzD;AACAC,EAAAA,UAAU,CAAC,MAAI;AACXJ,IAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,KAAzC,CAA+CC,SAA/C,GAAyD,UAAzD;AACH,GAFS,EAER,GAFQ,CAAV;AAGH,CALM;AAOP,OAAO,MAAME,aAAa,GAAIC,KAAD,IAAU;AACnC,QAAMC,EAAE,GAAG,uJAAX;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACH,KAAD,CAAN,CAAcI,WAAd,EAAR,CAAP;AACH,CAHM;AAKP,OAAO,eAAeC,YAAf,CAA4BC,GAA5B,EAAgC;AACnC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,6CAA4CF,GAAG,CAACN,KAAM,aAAYM,GAAG,CAACG,QAAS,EAA5F;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,6CAA4CL,GAAG,CAACN,KAAM,aAAYM,GAAG,CAACG,QAAS,EAAjF,CAA5B;AACA,SAAO,MAAMC,QAAQ,CAACE,IAAT,EAAb;AAEH;KANqBP,Y;AAQtB,OAAO,MAAMQ,eAAe,GAAIC,GAAD,IAAQ;AACnC,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAC,EAAf,IAAqB,GAAhC;AACA,MAAGA,GAAG,GAAC,EAAJ,KAAW,CAAd,EACIC,IAAI,IAAI,MAAKD,GAAG,GAAC,EAAT,GAAc,GAAtB;AACJ,SAAOC,IAAP;AACH,CALM;AAOP,OAAO,MAAMG,YAAY,GAAIC,IAAD,IAAQ;AAChC,QAAMC,aAAa,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAtB;AACA,QAAMC,YAAY,GAAG,IAAIC,IAAJ,CAASH,aAAa,CAAC,CAAD,CAAtB,EAA0BA,aAAa,CAAC,CAAD,CAAb,GAAiB,CAA3C,EAA6CA,aAAa,CAAC,CAAD,CAA1D,CAArB;AACA,QAAMI,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACA,QAAME,KAAK,GAAG,IAAIF,IAAJ,CAASC,GAAG,CAACE,WAAJ,EAAT,EAA2BF,GAAG,CAACG,QAAJ,EAA3B,EAA0CH,GAAG,CAACI,OAAJ,EAA1C,CAAd;AACA,SAAON,YAAY,GAAGG,KAAtB;AACH,CANM;AAQP,OAAO,MAAMI,mBAAmB,GAAIC,MAAD,IAAW;AAC1C,QAAMC,MAAM,GAAG;AACX,UAAK,SADM;AAEX,UAAK,UAFM;AAGX,UAAK,OAHM;AAIX,UAAK,OAJM;AAKX,UAAK,KALM;AAMX,UAAK,MANM;AAOX,UAAK,MAPM;AAQX,UAAK,QARM;AASX,UAAK,WATM;AAUX,UAAK,SAVM;AAWX,UAAK,UAXM;AAYX,UAAK;AAZM,GAAf;AAcA,SAAOA,MAAM,CAACD,MAAD,CAAb;AACH,CAhBM","sourcesContent":["export const popUpError = () =>{\r\n    document.getElementById(\"account-error\").style.transform=\"scale(1.2)\";\r\n    setTimeout(()=>{\r\n        document.getElementById(\"account-error\").style.transform=\"scale(1)\";\r\n    },500)\r\n}\r\n\r\nexport const validateEmail = (email)=> {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport async function LoginRequest(obj){\r\n    //    email,password\r\n    console.log(`http://localhost:3000/login?email_address=${obj.email}&password=${obj.password}`)\r\n    const response = await fetch(`http://localhost:3000/login?email_address=${obj.email}&password=${obj.password}`)\r\n    return await response.json()\r\n\r\n}\r\n\r\nexport const beautifyMinutes = (min) =>{\r\n    let time = Math.floor(min/60) + \"h\"\r\n    if(min%60 !== 0)\r\n        time += ' '+ min%60 + 'm'\r\n    return time\r\n}\r\n\r\nexport const isDateInPast = (date)=>{\r\n    const splittedValue = date.split('-')\r\n    const selectedDate = new Date(splittedValue[0],splittedValue[1]-1,splittedValue[2])\r\n    const now = new Date()\r\n    const today = new Date(now.getFullYear(),now.getMonth(),now.getDate())\r\n    return selectedDate < today\r\n}\r\n\r\nexport const monthNumberToString = (number) =>{\r\n    const months = {\r\n        '01':\"January\",\r\n        '02':\"February\",\r\n        '03':\"March\",\r\n        '04':\"April\",\r\n        '05':\"May\",\r\n        '06':\"June\",\r\n        '07':\"July\",\r\n        '08':\"August\",\r\n        '09':\"September\",\r\n        '10':\"October\",\r\n        '11':\"November\",\r\n        '12':\"December\",\r\n    }\r\n    return months[number];\r\n}"]},"metadata":{},"sourceType":"module"}